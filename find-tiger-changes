#!/usr/bin/perl

use POSIX;

$xml = 1;

@counties = (
	"18011", # Boone
	"18057", # Hamilton
	"18023", # Clinton
	"18159", # Tipton
);

$minlat = 360;
$minlon = 360;
$maxlat = -360;
$maxlon = -360;

$pi = 4 * atan2(1, 1);
$foot = .00000274;
$slop = 2 * $foot;

unless ($xml) {
	print "0 setlinewidth\n";
}

for $county (@counties) {
	@files = <../../tiger/2006/www2.census.gov/geo/tiger/tiger2006se/*/TGR$county.ZIP>;

	open(IN, "unzip -p $files[0] TGR$county.RT2 |");
	while (<IN>) {
		chomp;
		$tlid = substr($_, 5, 10);
		$tlid =~ s/^ *//;

		for ($i = 18; $i < 208; $i += 19) {
			$lon = substr($_, $i, 10) / 1000000;
			$lat = substr($_, $i + 10, 9) / 1000000;

			if ($lat != 0) {
				push @{$oldlat{$county}{$tlid}}, $lat;
				push @{$oldlon{$county}{$tlid}}, $lon;
			}
		}
	}
	close(IN);

	open(IN, "unzip -p $files[0] TGR$county.RT1 |");
	while (<IN>) {
		chomp;
		$tlid = substr($_, 5, 10);
		$tlid =~ s/^ *//;

		$startlon = substr($_, 190, 10) / 1000000;
		$startlat = substr($_, 200, 9) / 1000000;
		$endlon = substr($_, 209, 10) / 1000000;
		$endlat = substr($_, 219, 9) / 1000000;

		unshift @{$oldlat{$county}{$tlid}}, $startlat;
		unshift @{$oldlon{$county}{$tlid}}, $startlon;

		push @{$oldlat{$county}{$tlid}}, $endlat;
		push @{$oldlon{$county}{$tlid}}, $endlon;
	}
	close(IN);
}

for $county (@counties) {
	open(IN, "java shpcat ../../tiger/2013/www2.census.gov/geo/tiger/TIGERrd13/EDGES/tl_rd13_${county}_edges.zip |");
	while (<IN>) {
		chomp;

		($state, $cty, $tlid) = split(/\|/);
		$tlid =~ s/^ *//;
		next unless $tlid =~ /^[0-9]/;

		s/.*polyline //;
		@points = split(/ /, $_);

		for $p (@points) {
			($lon, $lat) = split(/,/, $p);
			push @{$newlat{$county}{$tlid}}, $lat;
			push @{$newlon{$county}{$tlid}}, $lon;

			if ($lat < $minlat) {
				$minlat = $lat;
			}
			if ($lon < $minlon) {
				$minlon = $lon;
			}
			if ($lat > $maxlat) {
				$maxlat = $lat;
			}
			if ($lon > $maxlon) {
				$maxlon = $lon;
			}
		}
	}
}

$countybounds = "$minlon,$minlat,$maxlon,$maxlat";

if ($xml) {
	($sec, $min, $hour, $mday, $mon, $year) = gmtime(time);
	$timestamp = sprintf("%04d-%02d-%02dT%02d:%02d:%02dZ", $year + 1900, $mon + 1, $mday,
		$hour, $min, $sec);

	print "<osmChange version=\"0.6\" generator=\"2013 TIGER update\">\n";
} else {
	$rat = cos(($minlat + $maxlat) / 2 * $pi / 180);

	if (($maxlon - $minlon) * $rat > $maxlat - $minlat) {
		$dimension = ($maxlon - $minlon) * $rat;
	} else {
		$dimension = $maxlat - $minlat;
	}

	$lat = ($maxlat + $minlat) / 2;
	$lon = ($maxlon + $minlon) / 2;

	$minlat = $lat - $dimension / 2;
	$minlon = $lon - ($dimension / $rat / 2);
	$maxlat = $lat + $dimension / 2;
	$maxlon = $lon + ($dimension / $rat / 2);

	print "1 1 0 setrgbcolor\n";

	for $county (@counties) {
		for $tlid (keys(%{$newlat{$county}})) {
			@olat = @{$oldlat{$county}{$tlid}};

			if ($#olat < 0) {
				@a = @{$newlat{$county}{$tlid}};
				@o = @{$newlon{$county}{$tlid}};

				for ($i = 0; $i <= $#a; $i++) {
					printf("%.3f %.3f %s ",
						($o[$i] - $minlon) * 612 / ($maxlon - $minlon),
						($a[$i] - $minlat) * 612 / ($maxlat - $minlat),
						$i == 0 ? "moveto" : "lineto");
				}

				print "stroke\n";
			}
		}
	}
}

open(IN, "./osmconvert $ENV{'HOME'}/north-america-latest.osm.pbf -b=$countybounds |");

$tmpfile = "/tmp/osm.$$";
open(OUT, ">$tmpfile");

while (<IN>) {
	print OUT;
	if (/<node id="([^"]*).*lat="([^"]*).*lon="([^"]*)/) {
		$nodelat{$1} = $2;
		$nodelon{$1} = $3;
	}

	if (/<way id="([^"]*)/) {
		$way = $1;
		@nodes = ();
		@tlids = ();

		while (<IN>) {
			print OUT;
			last if (/<\/way/);

			if (/<nd ref="([^"]*)/) {
				push @nodes, $1;
				$noderefs{$1}++;
			}

			if (/<tag k="tiger:tlid" v="([^"]*)/) {
				@tlids = split(/[ ;:]+/, $1);
			}
		}

		@{$nodes{$way}} = @nodes;
		@{$tlids{$way}} = @tlids;
	}
}

for $way (keys(%nodes)) {
	@nodes = @{$nodes{$way}};
	@tlids = @{$tlids{$way}};

	TLID:
	for $tlid (@tlids) {
		for $county (@counties) {
			@tlat = @{$oldlat{$county}{$tlid}};
			@tlon = @{$oldlon{$county}{$tlid}};

			@nlat = @{$newlat{$county}{$tlid}};
			@nlon = @{$newlon{$county}{$tlid}};

			next if $#tlat < 1 || $#nlat < 1;

			for ($pass = 0; $pass < 2; $pass++) {
				$found = -1;
				OUTER:
				for ($i = 0; $i <= $#nodes; $i++) {
					for ($j = 0; $j <= $#tlat; $j++) {
						next OUTER if abs($nodelat{$nodes[$i + $j]} - $tlat[$j]) > $slop;
						next OUTER if abs($nodelon{$nodes[$i + $j]} - $tlon[$j]) > $slop;
					}

					$found = $i;
					last OUTER;
				}

				if ($found != -1) {
					for ($i = 1; $i <= $tlat - 1; $i++) {
						if ($noderefs{$nodes[$found + $i]} != 1) {
							print STDERR "Intermediate node $nodes[$found + $i] referenced by ";
							print STDERR "$noderefs{$nodes[$found + $i]} ways\n";

							next TLID;
						}
					}

					for ($i = 0; $i <= $#tlat; $i++) {
						$matched{$nodes[$found + $i]} = 1;
					}

					if ($#tlat == $#nlat) {
						for ($i = 0; $i <= $#tlat; $i++) {
							$newnodelat{$nodes[$found + $i]} = $nlat[$i];
							$newnodelon{$nodes[$found + $i]} = $nlon[$i];

							if (abs($nodelat{$nodes[$found + $i]} - $newnodelat{$nodes[$found + $i]}) > $slop) {
								$moved{$nodes[$found + $i]} = 1;
							}
							if (abs($nodelon{$nodes[$found + $i]} - $newnodelon{$nodes[$found + $i]}) > $slop) {
								$moved{$nodes[$found + $i]} = 1;
							}
						}
					} elsif ($#tlat > $#nlat) {
						# Use as many old nodes as necessary - 1 for new positions

						for ($i = 0; $i <= $#nlat - 1; $i++) {
							$newnodelat{$nodes[$found + $i]} = $nlat[$i];
							$newnodelon{$nodes[$found + $i]} = $nlon[$i];
							$moved{$nodes[$found + $i]} = 1;
						}

						# Remove no longer used nodes

						for ($i = $#nlat; $i <= $#tlat - 1; $i++) {
							if ($xml) {
								$newnodelat{$nodes[$found + $i]} = "delete";
								$newnodelon{$nodes[$found + $i]} = "delete";
							} else {
								$newnodelat{$nodes[$found + $i]} = $newnodelat{$nodes[$found + $i - 1]}; 
								$newnodelon{$nodes[$found + $i]} = $newnodelon{$nodes[$found + $i - 1]};
							}

							$moved{$nodes[$found + $i]} = 1;
						}

						# Last old node gets last new position

						$newnodelat{$nodes[$found + $#tlat]} = $nlat[$#nlat];
						$newnodelon{$nodes[$found + $#tlon]} = $nlon[$#nlon];
						$moved{$nodes[$found + $#tlon]} = 1;

						$affected{$way} = 1;
					} else {
						# As many old nodes as available - 1 moved to new positions

						for ($i = 0; $i <= $#tlat - 1; $i++) {
							$newnodelat{$nodes[$found + $i]} = $nlat[$i];
							$newnodelon{$nodes[$found + $i]} = $nlon[$i];
							$moved{$nodes[$found + $i]} = 1;
						}

						# Last node moved to new position

						$newnodelat{$nodes[$found + $#tlat]} = $nlat[$#nlat];
						$newnodelon{$nodes[$found + $#tlon]} = $nlon[$#nlon];
						$moved{$nodes[$found + $#tlon]} = 1;

						# Make new nodes for in between

						for ($i = $#tlat; $i < $#nlat; $i++) {
							$gensym--;

							$newnodelat{$gensym} = $nlat[$i];
							$newnodelon{$gensym} = $nlon[$i];
							$matched{$gensym} = 1;
							$moved{$gensym} = 1;

							$nodelat{$gensym} = $nodelat{$nodes[$found + $i - 1]};
							$nodelon{$gensym} = $nodelon{$nodes[$found + $i - 1]};

							splice @nodes, $found + $i, 0, $gensym;
						}

						$affected{$way} = 1;
					}

					next TLID;
				}

				@tlat = reverse(@tlat);
				@tlon = reverse(@tlon);

				@nlat = reverse(@nlat);
				@nlon = reverse(@nlon);
			}
		}
	}

	@{$nodes{$way}} = @nodes;
}

if ($xml) {
	print "\t<create>\n";

	for ($i = $gensym; $i < 0; $i++) {
		print "\t\t<node id=\"$i\" lat=\"$newnodelat{$i}\" lon=\"$newnodelon{$i}\" version=\"1\" timestamp=\"$timestamp\">\n";
		print "\t\t\t<tag k=\"source\" v=\"TIGERrd13\"/>\n";
		print "\t\t</node>\n";
	}

	print "\t</create>\n";

	open(IN, "$tmpfile");

	while (<IN>) {
		if (/<node id="([^"]*).*lat="([^"]*).*lon="([^"]*)/) {
			$id = $1;

			if ($newnodelat{$id} eq "delete") {
				print "\t<delete>\n";
				print "\t\t<node id=\"$id\"/>\n";
				print "\t</delete>\n";
				$moved{$id} = 0;
			}

			if ($moved{$id}) {
				s/lat="[^"]*/lat=\"$newnodelat{$id}/;
				s/lon="[^"]*/lon=\"$newnodelon{$id}/;
				s/changeset="[^"]*"//;

				if (/version="([^"]*)/) {
					$version = $1 + 1;
					s/version="[^"]*/version=\"$version/;
				}

				print "\t<modify>\n";
				print "\t$_";
			}

			unless (/\/>/) {
				while (<IN>) {
					if ($moved{$id}) {
						print "\t$_";
					}

					last if (/<\/node/);
				}
			}

			if ($moved{$id}) {
				print "\t</modify>\n";
			}
		}

		if (/<way id="([^"]*)/) {
			$way = $1;
			@nodes = @{$nodes{$way}};
			s/timestamp="[^"]*/timestamp=\"$timestamp/;
			s/changeset="[^"]*"//;

			if (/version="([^"]*)/) {
				$version = $1 + 1;
				s/version="[^"]*/version=\"$version/;
			}

			if ($affected{$way}) {
				print "\t<modify>\n";
				print "\t$_";
				for $node (@nodes) {
					if ($newnodelat{$node} ne "delete") {
						print "\t\t\t<nd ref=\"$node\"/>\n";
					}
				}

				print "\t\t\t<tag k=\"tiger:update\" v=\"TIGERrd13\"/>\n";

				while (<IN>) {
					unless (/<nd/) {
						print "\t$_";
					}

					last if (/<\/way/);
				}

				print "\t</modify>\n";
			} else {
				while (<IN>) {
					last if (/<\/way/);
				}
			}
		}
	}

	print "</osmChange>\n";

	close(IN);
} else {
	for $way (keys(%nodes)) {
		@nodes = @{$nodes{$way}};
		@tlids = @{$tlids{$way}};

		if ($#tlids < 0) {
			# New ways, only in OSM

			print ".7 1 .7 setrgbcolor ";

			$within = 0;
			for ($i = 0; $i <= $#nodes; $i++) {
				if ($nodelon{$nodes[$i]} == 0) {
					$within = 0;
				} else {
					printf("%.3f %.3f %s ",
						($nodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
						($nodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
						$within ? "lineto" : "moveto");
					$within = 1;
				}
			}

			print "stroke\n";
		} else {
			for ($i = 0; $i < $#nodes; $i++) {
				if (!$matched{$nodes[$i]} && !$matched{$nodes[$i + 1]}) {
					# Not matched, so edited in OSM (or maybe just out of OSM extract bounds)

					if ($nodelat{$nodes[$i]} != 0 && $nodelat{$nodes[$i + 1]} != 0) {
						print "0 .6 0 setrgbcolor ";
						printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
							($nodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
							($nodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
							($nodelon{$nodes[$i + 1]} - $minlon) * 612 / ($maxlon - $minlon),
							($nodelat{$nodes[$i + 1]} - $minlat) * 612 / ($maxlat - $minlat));
					}
				} else {
					# Old TIGER (either matched and moved, or preserved)

					if ($nodelat{$nodes[$i]} != 0 && $nodelat{$nodes[$i + 1]} != 0) {
						print ".7 .7 1 setrgbcolor ";
						printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
							($nodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
							($nodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
							($nodelon{$nodes[$i + 1]} - $minlon) * 612 / ($maxlon - $minlon),
							($nodelat{$nodes[$i + 1]} - $minlat) * 612 / ($maxlat - $minlat));
					}

					if ($moved{$nodes[$i]} || $moved{$nodes[$i + 1]}) {
						# One or both ends moved in new TIGER

						print "0 0 .6 setrgbcolor ";

						if ($moved{$nodes[$i]}) {
							$startlat = $newnodelat{$nodes[$i]};
							$startlon = $newnodelon{$nodes[$i]};
						} else {
							$startlat = $nodelat{$nodes[$i]};
							$startlon = $nodelon{$nodes[$i]};
						}

						if ($moved{$nodes[$i + 1]}) {
							$endlat = $newnodelat{$nodes[$i + 1]};
							$endlon = $newnodelon{$nodes[$i + 1]};
						} else {
							$endlat = $nodelat{$nodes[$i + 1]};
							$endlon = $nodelon{$nodes[$i + 1]};
						}

						if ($startlat != 0 && $endlat != 0) {
							printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
								($startlon - $minlon) * 612 / ($maxlon - $minlon),
								($startlat - $minlat) * 612 / ($maxlat - $minlat),
								($endlon - $minlon) * 612 / ($maxlon - $minlon),
								($endlat - $minlat) * 612 / ($maxlat - $minlat));
						}
					}
				}
			}
		}
	}
}

unlink($tmpfile);
