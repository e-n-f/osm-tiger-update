#!/usr/bin/perl

use POSIX;

$county = "18167";  # Vigo County, Terre Haute, IN

$minlat = 360;
$minlon = 360;
$maxlat = -360;
$maxlon = -360;

$pi = 4 * atan2(1, 1);
$foot = .00000274;
$slop = 2 * $foot;

print "0 setlinewidth\n";

@files = <../../tiger/2006/www2.census.gov/geo/tiger/tiger2006se/*/TGR$county.ZIP>;

open(IN, "unzip -p $files[0] TGR$county.RT1 |");
while (<IN>) {
	chomp;
	$tlid = substr($_, 5, 10);
	$tlid =~ s/^ *//;

	$startlon{$tlid} = substr($_, 190, 10) / 1000000;
	$startlat{$tlid} = substr($_, 200, 9) / 1000000;
	$endlon{$tlid} = substr($_, 209, 10) / 1000000;
	$endlat{$tlid} = substr($_, 219, 9) / 1000000;
}
close(IN);

open(IN, "unzip -p $files[0] TGR$county.RT2 |");
while (<IN>) {
	chomp;
	$tlid = substr($_, 5, 10);
	$tlid =~ s/^ *//;

	for ($i = 18; $i < 208; $i += 19) {
		$lon = substr($_, $i, 10) / 1000000;
		$lat = substr($_, $i + 10, 9) / 1000000;

		if ($lat != 0) {
			push @{$oldlat{$tlid}}, $lat;
			push @{$oldlon{$tlid}}, $lon;
		}
	}
}
close(IN);

for $tlid (keys(%startlat)) {
	unshift @{$oldlat{$tlid}}, $startlat{$tlid};
	unshift @{$oldlon{$tlid}}, $startlon{$tlid};

	push @{$oldlat{$tlid}}, $endlat{$tlid};
	push @{$oldlon{$tlid}}, $endlon{$tlid};
}

open(IN, "java shpcat ../../tiger/2013/www2.census.gov/geo/tiger/TIGERrd13/EDGES/tl_rd13_${county}_edges.zip |");
while (<IN>) {
	chomp;

	($state, $county, $tlid) = split(/\|/);
	$tlid =~ s/^ *//;
	next unless $tlid =~ /^[0-9]/;

	s/.*polyline //;
	@points = split(/ /, $_);

	for $p (@points) {
		($lon, $lat) = split(/,/, $p);
		push @{$newlat{$tlid}}, $lat;
		push @{$newlon{$tlid}}, $lon;

		if ($lat < $minlat) {
			$minlat = $lat;
		}
		if ($lon < $minlon) {
			$minlon = $lon;
		}
		if ($lat > $maxlat) {
			$maxlat = $lat;
		}
		if ($lon > $maxlon) {
			$maxlon = $lon;
		}
	}
}

$rat = cos(($minlat + $maxlat) / 2 * $pi / 180);

if (($maxlon - $minlon) * $rat > $maxlat - $minlat) {
	$dimension = ($maxlon - $minlon) * $rat;
} else {
	$dimension = $maxlat - $minlat;
}

$lat = ($maxlat + $minlat) / 2;
$lon = ($maxlon + $minlon) / 2;

$minlat = $lat - $dimension / 2;
$minlon = $lon - ($dimension / $rat / 2);
$maxlat = $lat + $dimension / 2;
$maxlon = $lon + ($dimension / $rat / 2);

print "1 1 0 setrgbcolor\n";

for $tlid (keys(%newlat)) {
	@olat = @{$oldlat{$tlid}};

	if ($#olat < 0) {
		@a = @{$newlat{$tlid}};
		@o = @{$newlon{$tlid}};

		for ($i = 0; $i <= $#a; $i++) {
			printf("%.3f %.3f %s ",
				($o[$i] - $minlon) * 612 / ($maxlon - $minlon),
				($a[$i] - $minlat) * 612 / ($maxlat - $minlat),
				$i == 0 ? "moveto" : "lineto");
		}

		print "stroke\n";
	}
}

open(IN, "bzcat ../../osm/terre-haute.osm.bz2 |");
while (<IN>) {
	if (/<node id="([^"]*).*lat="([^"]*).*lon="([^"]*)/) {
		$nodelat{$1} = $2;
		$nodelon{$1} = $3;
	}

	if (/<way id="([^"]*)/) {
		$way = $1;
		$theway = $_;
		@nodes = ();
		@tlids = ();

		while (<IN>) {
			$theway .= $_;
			last if (/<\/way/);

			if (/<nd ref="([^"]*)/) {
				push @nodes, $1;
				$noderefs{$1}++;
			}

			if (/<tag k="tiger:tlid" v="([^"]*)/) {
				@tlids = split(/[ ;:]+/, $1);
			}
		}

		@{$nodes{$way}} = @nodes;
		@{$tlids{$way}} = @tlids;
	}
}

for $way (keys(%nodes)) {
	@nodes = @{$nodes{$way}};
	@tlids = @{$tlids{$way}};

	$changed = 0;

	TLID:
	for $tlid (@tlids) {
		@tlat = @{$oldlat{$tlid}};
		@tlon = @{$oldlon{$tlid}};

		@nlat = @{$newlat{$tlid}};
		@nlon = @{$newlon{$tlid}};

		next if $#tlat < 1 || $#nlat < 1;

		for ($pass = 0; $pass < 2; $pass++) {
			$found = -1;
			OUTER:
			for ($i = 0; $i <= $#nodes; $i++) {
				for ($j = 0; $j <= $#tlat; $j++) {
					next OUTER if abs($nodelat{$nodes[$i + $j]} - $tlat[$j]) > $slop;
					next OUTER if abs($nodelon{$nodes[$i + $j]} - $tlon[$j]) > $slop;
				}

				$found = $i;
				last OUTER;
			}

			if ($found != -1) {
				$changed = 1;

				for ($i = 1; $i <= $tlat - 1; $i++) {
					if ($noderefs{$nodes[$found + $i]} != 1) {
						print STDERR "Intermediate node $nodes[$found + $i] referenced by ";
						print STDERR "$noderefs{$nodes[$found + $i]} ways\n";

						next TLID;
					}
				}

				if ($#tlat == $#nlat) {
					for ($i = 0; $i <= $#tlat; $i++) {
						$newnodelat{$nodes[$found + $i]} = $nlat[$i];
						$newnodelon{$nodes[$found + $i]} = $nlon[$i];

						if (abs($nodelat{$nodes[$found + $i]} - $newnodelat{$nodes[$found + $i]}) < $slop) {
							$minor{$nodes[$found + $i]} = 1;
						}
						if (abs($nodelon{$nodes[$found + $i]} - $newnodelon{$nodes[$found + $i]}) < $slop) {
							$minor{$nodes[$found + $i]} = 1;
						}
					}
				} elsif ($#tlat > $#nlat) {
					# Use as many old nodes as necessary - 1 for new positions

					for ($i = 0; $i <= $#nlat - 1; $i++) {
						$newnodelat{$nodes[$found + $i]} = $nlat[$i];
						$newnodelon{$nodes[$found + $i]} = $nlon[$i];
					}

					# Remove no longer used nodes

					for ($i = $#nlat; $i <= $#tlat - 1; $i++) {
						$newnodelat{$nodes[$found + $i]} = 0;
						$newnodelon{$nodes[$found + $i]} = 0;
					}

					# Last old node gets last new position

					$newnodelat{$nodes[$found + $#tlat]} = $nlat[$#nlat];
					$newnodelon{$nodes[$found + $#tlon]} = $nlon[$#nlon];
				} else {
					# As many old nodes as available - 1 moved to new positions

					for ($i = 0; $i <= $#tlat - 1; $i++) {
						$newnodelat{$nodes[$found + $i]} = $nlat[$i];
						$newnodelon{$nodes[$found + $i]} = $nlon[$i];
					}

					# Last node moved to new position

					$newnodelat{$nodes[$found + $#tlat]} = $nlat[$#nlat];
					$newnodelon{$nodes[$found + $#tlon]} = $nlon[$#nlon];

					# Make new nodes for in between

					for ($i = $#tlat; $i < $#nlat; $i++) {
						$gensym--;

						$newnodelat{$gensym} = $nlat[$i];
						$newnodelon{$gensym} = $nlon[$i];

						splice @nodes, $found + $i, 0, $gensym;
					}
				}

				next TLID;
			}

			@tlat = reverse(@tlat);
			@tlon = reverse(@tlon);

			@nlat = reverse(@nlat);
			@nlon = reverse(@nlon);
		}
	}

	@{$nodes{$way}} = @nodes;
}

for $way (keys(%nodes)) {
	@nodes = @{$nodes{$way}};
	@tlids = @{$tlids{$way}};

	if ($#tlids < 0) {
		# New ways, only in OSM

		print ".7 1 .7 setrgbcolor ";

		$within = 0;
		for ($i = 0; $i <= $#nodes; $i++) {
			if ($nodelon{$nodes[$i]} == 0) {
				$within = 0;
			} else {
				printf("%.3f %.3f %s ",
					($nodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
					($nodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
					$within ? "lineto" : "moveto");
				$within = 1;
			}
		}

		print "stroke\n";
	} else {
		for ($i = 0; $i < $#nodes; $i++) {
			if ($newnodelat{$nodes[$i]} == 0 && $newnodelat{$nodes[$i + 1]} == 0) {
				# Not matched, so edited in OSM (or maybe just out of OSM extract bounds)

				if ($nodelat{$nodes[$i]} != 0 && $nodelat{$nodes[$i + 1]} != 0) {
					print "0 .6 0 setrgbcolor ";
					printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
						($nodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
						($nodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
						($nodelon{$nodes[$i + 1]} - $minlon) * 612 / ($maxlon - $minlon),
						($nodelat{$nodes[$i + 1]} - $minlat) * 612 / ($maxlat - $minlat));
				}
			} else {
				# Old TIGER (either matched and moved, or preserved)

				if ($nodelat{$nodes[$i]} != 0) {
					for ($j = $i + 1; $j <= $#nodes; $j++) {
						last if ($nodelat{$nodes[$j]} != 0);
					}

					if ($nodelat{$nodes[$j]} != 0) {
						print ".7 .7 1 setrgbcolor ";
						printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
							($nodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
							($nodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
							($nodelon{$nodes[$j]} - $minlon) * 612 / ($maxlon - $minlon),
							($nodelat{$nodes[$j]} - $minlat) * 612 / ($maxlat - $minlat));
					}
				}

				# Matched and moved

				if ($newnodelat{$nodes[$i]} != 0) {
					for ($j = $i + 1; $j <= $#nodes; $j++) {
						last if ($newnodelat{$nodes[$j]} != 0);
					}

					if ($newnodelat{$nodes[$j]} != 0) {
						$lat1a = $nodelat{$nodes[$i]};
						$lon1a = $nodelon{$nodes[$i]};

						$lat1b = $newnodelat{$nodes[$i]};
						$lon1b = $newnodelon{$nodes[$i]};

						$lat2a = $nodelat{$nodes[$j]};
						$lon2a = $nodelon{$nodes[$j]};

						$lat2b = $newnodelat{$nodes[$j]};
						$lon2b = $newnodelon{$nodes[$j]};

						$lat1d = abs($lat1a - $lat1b);
						$lon1d = abs($lon1a - $lon1b);

						$lat2d = abs($lat2a - $lat2b);
						$lon2d = abs($lon2a - $lon2b);

						if ($lat1d > $slop || $lat2d > $slop || $lon1d > $slop || $lat2d > $slop) {
							print "0 0 .6 setrgbcolor ";
							printf("%.3f %.3f moveto %.3f %.3f lineto stroke\n",
								($newnodelon{$nodes[$i]} - $minlon) * 612 / ($maxlon - $minlon),
								($newnodelat{$nodes[$i]} - $minlat) * 612 / ($maxlat - $minlat),
								($newnodelon{$nodes[$j]} - $minlon) * 612 / ($maxlon - $minlon),
								($newnodelat{$nodes[$j]} - $minlat) * 612 / ($maxlat - $minlat));
						}
					}
				}
			}
		}
	}
}
