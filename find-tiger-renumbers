#!/usr/bin/perl

use POSIX;
use XML::Parser;

binmode(STDOUT, ":utf8");

if ($#ARGV < 0) {
	$county = "18011";
} else {
	$county = $ARGV[0];
	
}

$pi = 4 * atan2(1, 1);
$foot = .00000274;

$minlat = 360;
$minlon = 360;
$maxlat = -360;
$maxlon = -360;

%county_number_map = (
	"01" => "AL", "02" => "AK", "04" => "AZ", "05" => "AR", "06" => "CA",
	"08" => "CO", "09" => "CT", "10" => "DE", "11" => "DC", "12" => "FL",
	"13" => "GA", "15" => "HI", "16" => "ID", "17" => "IL", "18" => "IN",
	"19" => "IA", "20" => "KS", "21" => "KY", "22" => "LA", "23" => "ME",
	"24" => "MD", "25" => "MA", "26" => "MI", "27" => "MN", "28" => "MS",
	"29" => "MO", "30" => "MT", "31" => "NE", "32" => "NV", "33" => "NH",
	"34" => "NJ", "35" => "NM", "36" => "NY", "37" => "NC", "38" => "ND",
	"39" => "OH", "40" => "OK", "41" => "OR", "42" => "PA", "44" => "RI",
	"45" => "SC", "46" => "SD", "47" => "TN", "48" => "TX", "49" => "UT",
	"50" => "VT", "51" => "VA", "53" => "WA", "54" => "WV", "55" => "WI",
	"56" => "WY", "60" => "AS", "66" => "GU", "69" => "MP", "72" => "PR",
	"78" => "VI",
);

mkdir "tiger";

$state = $county_number_map{substr($county, 0, 2)};
$file = "TGR$county.ZIP";

unless (-f "tiger/$file") {
	system "curl -o tiger/$file http://www2.census.gov/geo/tiger/tiger2006se/$state/$file";
}

open(IN, "unzip -p tiger/$file TGR$county.RT2 |");
while (<IN>) {
	chomp;
	$tlid = substr($_, 5, 10);
	$tlid =~ s/^ *//;

	for ($i = 18; $i < 208; $i += 19) {
		$lon = substr($_, $i, 10) / 1000000;
		$lat = substr($_, $i + 10, 9) / 1000000;

		if ($lat != 0) {
			push @{$oldlat{$tlid}}, $lat;
			push @{$oldlon{$tlid}}, $lon;
		}
	}
}
close(IN);

open(IN, "unzip -p tiger/$file TGR$county.RT1 |");
while (<IN>) {
	chomp;
	$tlid = substr($_, 5, 10);
	$tlid =~ s/^ *//;

	$startlon = substr($_, 190, 10) / 1000000;
	$startlat = substr($_, 200, 9) / 1000000;
	$endlon = substr($_, 209, 10) / 1000000;
	$endlat = substr($_, 219, 9) / 1000000;

	$cfcc = substr($_, 55, 3);
	$cfcc{$tlid} = $cfcc;

	$dirp = substr($_, 17, 2);
	$name = substr($_, 19, 30);
	$type = substr($_, 49, 4);
	$dirs = substr($_, 53, 2);

	$blockl = substr($_, 130, 2) . substr($_, 134, 3) . substr($_, 170, 6) . substr($_, 182, 4);
	$blockr = substr($_, 132, 2) . substr($_, 137, 3) . substr($_, 176, 6) . substr($_, 186, 4);

	$blockl{$tlid} = $blockl;
	$blockr{$tlid} = $blockr;

	unshift @{$oldlat{$tlid}}, $startlat;
	unshift @{$oldlon{$tlid}}, $startlon;

	push @{$oldlat{$tlid}}, $endlat;
	push @{$oldlon{$tlid}}, $endlon;

	push @{$tlid_starts{"$startlat,$startlon"}}, $tlid;
	push @{$tlid_ends{"$endlat,$endlon"}}, $tlid;

	$name{$tlid} = "$dirp $name $type $dirs";
	$name{$tlid} =~ s/ +/ /g;
}
close(IN);

print STDERR "read county $county\n";

$file = "tl_2010_${county}_edges.zip";
unless (-f "tiger/$file") {
	system "curl -o tiger/$file http://www2.census.gov/geo/tiger/TIGER2010/EDGES/tl_2010_${county}_edges.zip";
}

open(IN, "java shpcat tiger/$file |");
while (<IN>) {
	chomp;

	($state, $cty, $tlid, $tfidl, $tfidr, $mtfcc, $fullname, $smid, $addrls, $addrle, $addrrs, $addrre) = split(/\|/);
	$tlid =~ s/^ *//;
	next unless $tlid =~ /^[0-9]/;

	s/.*polyline //;
	@points = split(/ /, $_);

	for $p (@points) {
		($lon, $lat) = split(/,/, $p);
		push @{$newlat{$tlid}}, $lat;
		push @{$newlon{$tlid}}, $lon;

		if ($lat < $minlat) {
			$minlat = $lat;
		}
		if ($lon < $minlon) {
			$minlon = $lon;
		}
		if ($lat > $maxlat) {
			$maxlat = $lat;
		}
		if ($lon > $maxlon) {
			$maxlon = $lon;
		}
	}

	($startlon, $startlat) = split(/,/, $points[0]);
	($endlon, $endlat) = split(/,/, $points[$#points]);
}
close(IN);

$file = "tl_2010_${county}_tabblock00.zip";
unless (-f "tiger/$file") {
	system "curl -o tiger/$file http://www2.census.gov/geo/tiger/TIGER2010/TABBLOCK/2000/tl_2010_${county}_tabblock00.zip";
}

open(IN, "java shpcat tiger/$file |");
while (<IN>) {
	chomp;

	($state, $cty, $tract, $block) = split(/\|/);
	next unless $block =~ /^[0-9]/;

	# print "$state$cty$tract$block\n";

	s/.*polygon //;
	@points = split(/ /, $_);

	if (defined($newblocklat{"$state$cty$tract$block"})) {
		print STDERR "dup block $state$cty$tract$block\n";
	}

	$within = "";
	$subpoly = 0;

	for $p (@points) {
		if ($p ne ";") {
			if ($within eq "") {
				$within = $p;
			} elsif ($p eq $within) {
				$subpoly++;
				$within = "";
				next;
			}

			($lon, $lat) = split(/,/, $p);
			push @{$newblocklat{"$state$cty$tract$block"}{$subpoly}}, $lat;
			push @{$newblocklon{"$state$cty$tract$block"}{$subpoly}}, $lon;
		}
	}
}

$rat = cos(($minlat + $maxlat) / 2 * $pi / 180);

if (($maxlon - $minlon) * $rat > $maxlat - $minlat) {
	$dimension = ($maxlon - $minlon) * $rat;
} else {
	$dimension = $maxlat - $minlat;
}

$lat = ($maxlat + $minlat) / 2;
$lon = ($maxlon + $minlon) / 2;

$minlat = $lat - $dimension / 2;
$minlon = $lon - ($dimension / $rat / 2);
$maxlat = $lat + $dimension / 2;
$maxlon = $lon + ($dimension / $rat / 2);

printf("%.3f setlinewidth\n", 20 * $foot * 612 / ($maxlat - $minlat));

#print ".3 .setopacityalpha\n";
print "1 1 0 setrgbcolor\n";

for $b (keys(%newblocklat)) {
	for $s (keys(%{$newblocklat{$b}})) {
		@lat = @{$newblocklat{$b}{$s}};
		@lon = @{$newblocklon{$b}{$s}};

		for ($i = 0; $i <= $#lat; $i++) {
			printf("%.3f %.3f ",
				($lon[$i] - $minlon) * 612 / ($maxlon - $minlon),
				($lat[$i] - $minlat) * 612 / ($maxlat - $minlat),
			);

			if ($i == 0) {
				print "moveto ";
			} else {
				print "lineto ";
			}
		}

		print "stroke\n";
	}
}

sub find_intersection {
	my @tlids = @_;
	my %common = ();
	my %this = ();
	my $i, $j;
	my $s1, $s2;
	my @a1, @o1, @a2, @o2;

	for ($i = 0; $i <= $#tlids; $i++) {
		%this = ();

		for $s1 (keys(%{$newblocklat{$blockl{$tlids[$i]}}})) {
			@a1 = @{$newblocklat{$blockl{$tlids[$i]}}{$s1}};
			@o1 = @{$newblocklon{$blockl{$tlids[$i]}}{$s1}};

			for ($j = 0; $j <= $#a1; $j++) {
				$this{"$a1[$j],$o1[$j]"} = 1;
			}
		}

		for $s2 (keys(%{$newblocklat{$blockr{$tlids[$i]}}})) {
			@a2 = @{$newblocklat{$blockr{$tlids[$i]}}{$s2}};
			@o2 = @{$newblocklon{$blockr{$tlids[$i]}}{$s2}};

			for ($j = 0; $j <= $#a2; $j++) {
				$this{"$a2[$j],$o2[$j]"} = 1;
			}
		}

		if ($i == 0) {
			%common = %this;
		} else {
			for $j (keys(%common)) {
				if ($this{$j} != 1) {
					# print STDERR "eliminate $j\n";
					delete $common{$j};
				}
			}
		}
	}

	if (0) {
		print STDERR "surviving: ";
		for $j (keys(%common)) {
			print STDERR "$j ";
		}
		print STDERR "\n";
	}

	my @survive = keys(%common);

	if ($#survive == 0) {
		return $survive[0];
	} else {
		return "fail";
	}
}

for $tlid (keys(%oldlat)) {
	# next unless $cfcc{$tlid} =~ /^A/ || $cfcc{$tlid} =~ /^B/;  # roads, railroads

	@oldlat = @{$oldlat{$tlid}};
	@oldlon = @{$oldlon{$tlid}};

	print ".8 .8 .8 setrgbcolor\n";

	for ($i = 0; $i <= $#oldlat; $i++) {
		printf("%.3f %.3f ",
			($oldlon[$i] - $minlon) * 612 / ($maxlon - $minlon),
			($oldlat[$i] - $minlat) * 612 / ($maxlat - $minlat),
		);

		if ($i == 0) {
			print "moveto ";
		} else {
			print "lineto ";
		}
	}

	print "stroke\n";

	if (!defined($newlat{$tlid})) {
		# print "only in old: $tlid $blockl{$tlid} and $blockr{$tlid}: $name{$tlid}\n";

		$start = "$oldlat[0],$oldlon[0]";
		$end = "$oldlat[$#oldlat],$oldlon[$#oldlon]";

		# print "which used to be $start to $end\n";

		# print "at $start started @{$tlid_starts{$start}} and ended @{$tlid_ends{$start}}\n";
		# print "at $end started @{$tlid_starts{$end}} and ended @{$tlid_ends{$end}}\n";

		%start = ();
		%end = ();

		for $tlid (@{$tlid_starts{$start}}) {
			@a = @{$newlat{$tlid}};
			@o = @{$newlon{$tlid}};
			if ($#a >= 0) {
				$start{"$a[0],$o[0]"} = 1;
			}
		}

		for $tlid (@{$tlid_ends{$start}}) {
			@a = @{$newlat{$tlid}};
			@o = @{$newlon{$tlid}};
			if ($#a >= 0) {
				$start{"$a[$#a],$o[$#o]"} = 1;
			}
		}

		if (1) {
			%shared = ();
			for (@{$tlid_starts{$start}}, @{$tlid_ends{$start}}) {
				$shared{$_} = 1;
			}
			@shared = keys(%shared);
			$n = $#shared + 1;
			# print STDERR "$n tlids share $start\n";
			$start{find_intersection(@shared)} = 1;
		}

		# print "which means $start is now $startlat,$startlon\n";

		for $tlid (@{$tlid_starts{$end}}) {
			@a = @{$newlat{$tlid}};
			@o = @{$newlon{$tlid}};
			if ($#a >= 0) {
				$end{"$a[0],$o[0]"} = 1;
			}
		}

		for $tlid (@{$tlid_ends{$end}}) {
			@a = @{$newlat{$tlid}};
			@o = @{$newlon{$tlid}};
			if ($#a >= 0) {
				$end{"$a[$#a],$o[$#o]"} = 1;
			}
		}

		if (1) {
			%shared = ();
			for (@{$tlid_starts{$end}}, @{$tlid_ends{$end}}) {
				$shared{$_} = 1;
			}
			@shared = keys(%shared);
			$n = $#shared + 1;
			# print STDERR "$n tlids share $end\n";
			$end{find_intersection(@shared)} = 1;
		}

		# print "and $end is now $endlat,$endlon\n";

		%found = ();
		%len = ();

		delete $start{'fail'};
		delete $end{'fail'};

		for $st (keys(%start)) {
			for $en (keys(%end)) {
				($startlat,$startlon) = split(/,/, $st);
				($endlat,$endlon) = split(/,/, $en);

				print STDERR "looking for $st to $en for $tlid\n";

				for $s1 (keys(%{$newblocklat{$blockl{$tlid}}})) {
					for $s2 (keys(%{$newblocklat{$blockr{$tlid}}})) {
						@a1 = @{$newblocklat{$blockl{$tlid}}{$s1}};
						@o1 = @{$newblocklon{$blockl{$tlid}}{$s1}};

						@a2 = @{$newblocklat{$blockr{$tlid}}{$s2}};
						@o2 = @{$newblocklon{$blockr{$tlid}}{$s2}};

						for ($pass = 0; $pass < 4; $pass++) {
							if ($pass == 0) {
								@a = (@a1, @a1);
								@o = (@o1, @o1);
								$in = "left";
							} elsif ($pass == 1) {
								@a = reverse(@a1, @a1);
								@o = reverse(@o1, @o1);
								$in = "left";
							} elsif ($pass == 2) {
								@a = (@a2, @a2);
								@o = (@o2, @o2);
								$in = "right";
							} elsif ($pass == 1) {
								@a = reverse(@a2, @a2);
								@o = reverse(@o2, @o2);
								$in = "right";
							}

							I:
							for ($i = 0; $i <= $#a; $i++) {
								if ($a[$i] == $startlat && $o[$i] == $startlon) {
									for ($j = $i + 1; $j <= $#a; $j++) {
										if ($a[$j] == $endlat && $o[$j] == $endlon) {
											$d = 0;
											for ($k = $i; $k < $j; $k++) {
												$latd = $a[$k + 1] - $a[$k];
												$lond = $o[$k + 1] - $o[$k]; # XXX rat
												$d += sqrt($latd * $latd + $lond * $lond);
											}

											$string = "";
											for ($k = $i; $k <= $j; $k++) {
												$string .= "$a[$k],$o[$k] ";
											}

											$found{$string}{$in} = 1;
											$len{$string} = $d;

											next I;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		$string = "";
		@string = sort { $len{$a} <=> $len{$b} } keys(%len);
		$both = 0;

		for $s (@string) {
			if ($found{$s}{"left"} && $found{$s}{"right"}) {
				if ($string ne "") {
					# print STDERR "$tlid replace old match $string\n";
				}

				$string = $s;
				$both = 1;
				last;
			}

			if ($string eq "") {
				$string = $s;
			}
		}

		if ($string ne "") {
			if (!$both) {
				# print STDERR "$tlid only on one side: $string\n";
			}

			print "1 0 0 setrgbcolor\n";
			@pts = split(/ /, $string);

			for ($i = 0; $i <= $#pts; $i++) {
				($lat, $lon) = split(/,/, $pts[$i]);

				printf("%.3f %.3f ",
					($lon - $minlon) * 612 / ($maxlon - $minlon),
					($lat - $minlat) * 612 / ($maxlat - $minlat),
				);

				if ($i == 0) {
					print "moveto ";
				} else {
					print "lineto ";
				}
			}

			print "stroke\n";
		}

		# print "-> $string\n\n";
	} else {
		@newlat = @{$newlat{$tlid}};
		@newlon = @{$newlon{$tlid}};

		print "0 0 1 setrgbcolor\n";

		for ($i = 0; $i <= $#newlat; $i++) {
			printf("%.3f %.3f ",
				($newlon[$i] - $minlon) * 612 / ($maxlon - $minlon),
				($newlat[$i] - $minlat) * 612 / ($maxlat - $minlat),
			);

			if ($i == 0) {
				print "moveto ";
			} else {
				print "lineto ";
			}
		}

		print "stroke\n";
	}
}
